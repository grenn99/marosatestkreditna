import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { supabase } from '../../lib/supabaseClient';
import { Discount, DiscountType } from '../../utils/discountSystem';
import DiscountBanner from '../../components/DiscountBanner';

/**
 * Admin page for managing discounts
 */
export const DiscountManager: React.FC = () => {
  const { t } = useTranslation();
  const [discounts, setDiscounts] = useState<Discount[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [formMode, setFormMode] = useState<'create' | 'edit' | null>(null);
  const [currentDiscount, setCurrentDiscount] = useState<Partial<Discount>>({
    code: '',
    type: DiscountType.PERCENTAGE,
    value: 10,
    isActive: true
  });

  // Fetch discounts from the database
  useEffect(() => {
    const fetchDiscounts = async () => {
      try {
        setLoading(true);
        
        // This would be replaced with an actual API call to your database
        // For now, we'll use mock data
        const mockDiscounts: Discount[] = [
          {
            id: '1',
            code: 'WELCOME10',
            type: DiscountType.PERCENTAGE,
            value: 10,
            isActive: true,
            description: 'Welcome discount for new customers',
            endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days from now
          },
          {
            id: '2',
            code: 'SUMMER2023',
            type: DiscountType.PERCENTAGE,
            value: 15,
            minPurchase: 50,
            isActive: true,
            description: 'Summer sale discount',
            endDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000) // 15 days from now
          },
          {
            id: '3',
            code: 'FREESHIP',
            type: DiscountType.FREE_SHIPPING,
            value: 0,
            minPurchase: 75,
            isActive: true,
            description: 'Free shipping on orders over €75'
          }
        ];
        
        setDiscounts(mockDiscounts);
        setLoading(false);
      } catch (err) {
        console.error('Error fetching discounts:', err);
        setError('Failed to load discounts. Please try again.');
        setLoading(false);
      }
    };

    fetchDiscounts();
  }, []);

  // Handle form input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked;
      setCurrentDiscount(prev => ({ ...prev, [name]: checked }));
    } else if (name === 'type') {
      setCurrentDiscount(prev => ({ ...prev, [name]: value as DiscountType }));
    } else if (name === 'value' || name === 'minPurchase' || name === 'maxUses') {
      setCurrentDiscount(prev => ({ ...prev, [name]: parseFloat(value) || 0 }));
    } else if (name === 'endDate' || name === 'startDate') {
      setCurrentDiscount(prev => ({ ...prev, [name]: value ? new Date(value) : undefined }));
    } else {
      setCurrentDiscount(prev => ({ ...prev, [name]: value }));
    }
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      if (formMode === 'create') {
        // Create new discount
        const newDiscount: Discount = {
          id: Date.now().toString(), // This would be generated by the database
          ...currentDiscount as Omit<Discount, 'id'>
        };
        
        setDiscounts(prev => [...prev, newDiscount]);
      } else if (formMode === 'edit' && currentDiscount.id) {
        // Update existing discount
        setDiscounts(prev => 
          prev.map(discount => 
            discount.id === currentDiscount.id ? { ...discount, ...currentDiscount } : discount
          )
        );
      }
      
      // Reset form
      setFormMode(null);
      setCurrentDiscount({
        code: '',
        type: DiscountType.PERCENTAGE,
        value: 10,
        isActive: true
      });
    } catch (err) {
      console.error('Error saving discount:', err);
      setError('Failed to save discount. Please try again.');
    }
  };

  // Handle discount deletion
  const handleDelete = async (id: string) => {
    if (window.confirm(t('discounts.confirmDelete', 'Are you sure you want to delete this discount?'))) {
      try {
        setDiscounts(prev => prev.filter(discount => discount.id !== id));
      } catch (err) {
        console.error('Error deleting discount:', err);
        setError('Failed to delete discount. Please try again.');
      }
    }
  };

  // Handle discount edit
  const handleEdit = (discount: Discount) => {
    setCurrentDiscount(discount);
    setFormMode('edit');
  };

  // Toggle discount active status
  const toggleActive = async (id: string, isActive: boolean) => {
    try {
      setDiscounts(prev => 
        prev.map(discount => 
          discount.id === id ? { ...discount, isActive: !isActive } : discount
        )
      );
    } catch (err) {
      console.error('Error toggling discount status:', err);
      setError('Failed to update discount status. Please try again.');
    }
  };

  if (loading) {
    return (
      <div className="p-6">
        <h1 className="text-2xl font-bold mb-6">{t('discounts.manager', 'Discount Manager')}</h1>
        <div className="animate-pulse">
          <div className="h-10 bg-gray-200 rounded w-1/4 mb-6"></div>
          <div className="space-y-4">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="h-24 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">{t('discounts.manager', 'Discount Manager')}</h1>
      
      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
          <p>{error}</p>
          <button 
            className="text-red-700 font-bold ml-2"
            onClick={() => setError(null)}
          >
            ×
          </button>
        </div>
      )}
      
      {/* Discount List */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">{t('discounts.active', 'Active Discounts')}</h2>
          <button
            onClick={() => {
              setFormMode('create');
              setCurrentDiscount({
                code: '',
                type: DiscountType.PERCENTAGE,
                value: 10,
                isActive: true
              });
            }}
            className="bg-brown-600 text-white px-4 py-2 rounded-md hover:bg-brown-700 transition-colors"
          >
            {t('discounts.createNew', 'Create New')}
          </button>
        </div>
        
        {discounts.length === 0 ? (
          <p className="text-gray-600">{t('discounts.noDiscounts', 'No discounts available')}</p>
        ) : (
          <div className="space-y-4">
            {discounts.map(discount => (
              <div key={discount.id} className="border border-gray-200 rounded-lg overflow-hidden">
                <div className="p-4 bg-gray-50 flex justify-between items-center">
                  <div>
                    <span className="font-mono text-sm bg-gray-200 px-2 py-1 rounded">
                      {discount.code}
                    </span>
                    <span className={`ml-3 px-2 py-1 text-xs rounded ${
                      discount.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                    }`}>
                      {discount.isActive ? t('discounts.active', 'Active') : t('discounts.inactive', 'Inactive')}
                    </span>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => toggleActive(discount.id, discount.isActive)}
                      className={`px-3 py-1 rounded text-sm ${
                        discount.isActive 
                          ? 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200' 
                          : 'bg-green-100 text-green-800 hover:bg-green-200'
                      }`}
                    >
                      {discount.isActive ? t('discounts.deactivate', 'Deactivate') : t('discounts.activate', 'Activate')}
                    </button>
                    <button
                      onClick={() => handleEdit(discount)}
                      className="px-3 py-1 bg-blue-100 text-blue-800 rounded text-sm hover:bg-blue-200"
                    >
                      {t('discounts.edit', 'Edit')}
                    </button>
                    <button
                      onClick={() => handleDelete(discount.id)}
                      className="px-3 py-1 bg-red-100 text-red-800 rounded text-sm hover:bg-red-200"
                    >
                      {t('discounts.delete', 'Delete')}
                    </button>
                  </div>
                </div>
                <div className="p-4">
                  <DiscountBanner discount={discount} />
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* Discount Form */}
      {formMode && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold">
                  {formMode === 'create' 
                    ? t('discounts.createDiscount', 'Create Discount') 
                    : t('discounts.editDiscount', 'Edit Discount')}
                </h2>
                <button
                  onClick={() => setFormMode(null)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  ×
                </button>
              </div>
              
              <form onSubmit={handleSubmit}>
                <div className="space-y-4">
                  {/* Code */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      {t('discounts.code', 'Discount Code')}
                    </label>
                    <input
                      type="text"
                      name="code"
                      value={currentDiscount.code || ''}
                      onChange={handleInputChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brown-500"
                      required
                    />
                  </div>
                  
                  {/* Description */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      {t('discounts.description', 'Description')}
                    </label>
                    <textarea
                      name="description"
                      value={currentDiscount.description || ''}
                      onChange={handleInputChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brown-500"
                      rows={2}
                    />
                  </div>
                  
                  {/* Type */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      {t('discounts.type', 'Discount Type')}
                    </label>
                    <select
                      name="type"
                      value={currentDiscount.type}
                      onChange={handleInputChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brown-500"
                      required
                    >
                      <option value={DiscountType.PERCENTAGE}>{t('discounts.percentage', 'Percentage')}</option>
                      <option value={DiscountType.FIXED_AMOUNT}>{t('discounts.fixedAmount', 'Fixed Amount')}</option>
                      <option value={DiscountType.BUY_X_GET_Y}>{t('discounts.buyXGetY', 'Buy X Get Y')}</option>
                      <option value={DiscountType.FREE_SHIPPING}>{t('discounts.freeShipping', 'Free Shipping')}</option>
                    </select>
                  </div>
                  
                  {/* Value */}
                  {currentDiscount.type !== DiscountType.FREE_SHIPPING && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        {currentDiscount.type === DiscountType.PERCENTAGE 
                          ? t('discounts.percentageValue', 'Percentage Value') 
                          : currentDiscount.type === DiscountType.FIXED_AMOUNT 
                            ? t('discounts.amount', 'Amount (€)') 
                            : t('discounts.discountValue', 'Discount Value')}
                      </label>
                      <input
                        type="number"
                        name="value"
                        value={currentDiscount.value || 0}
                        onChange={handleInputChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brown-500"
                        min="0"
                        step={currentDiscount.type === DiscountType.PERCENTAGE ? "1" : "0.01"}
                        required
                      />
                    </div>
                  )}
                  
                  {/* Min Purchase */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      {t('discounts.minPurchase', 'Minimum Purchase (€)')}
                    </label>
                    <input
                      type="number"
                      name="minPurchase"
                      value={currentDiscount.minPurchase || ''}
                      onChange={handleInputChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brown-500"
                      min="0"
                      step="0.01"
                    />
                  </div>
                  
                  {/* Date Range */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        {t('discounts.startDate', 'Start Date')}
                      </label>
                      <input
                        type="date"
                        name="startDate"
                        value={currentDiscount.startDate ? new Date(currentDiscount.startDate).toISOString().split('T')[0] : ''}
                        onChange={handleInputChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brown-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        {t('discounts.endDate', 'End Date')}
                      </label>
                      <input
                        type="date"
                        name="endDate"
                        value={currentDiscount.endDate ? new Date(currentDiscount.endDate).toISOString().split('T')[0] : ''}
                        onChange={handleInputChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brown-500"
                      />
                    </div>
                  </div>
                  
                  {/* Max Uses */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      {t('discounts.maxUses', 'Maximum Uses')}
                    </label>
                    <input
                      type="number"
                      name="maxUses"
                      value={currentDiscount.maxUses || ''}
                      onChange={handleInputChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brown-500"
                      min="0"
                      step="1"
                    />
                  </div>
                  
                  {/* Active Status */}
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      name="isActive"
                      checked={currentDiscount.isActive || false}
                      onChange={handleInputChange}
                      className="h-4 w-4 text-brown-600 focus:ring-brown-500 border-gray-300 rounded"
                    />
                    <label className="ml-2 block text-sm text-gray-700">
                      {t('discounts.isActive', 'Active')}
                    </label>
                  </div>
                </div>
                
                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => setFormMode(null)}
                    className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                  >
                    {t('common.cancel', 'Cancel')}
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-brown-600 text-white rounded-md hover:bg-brown-700"
                  >
                    {formMode === 'create' 
                      ? t('discounts.create', 'Create') 
                      : t('discounts.update', 'Update')}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DiscountManager;
