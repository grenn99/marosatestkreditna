import React, { useState, useEffect, useCallback } from 'react';
import { useCart } from '../context/CartContext';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { supabase, supabaseAdmin } from '../lib/supabaseClient';
import { isValidPhoneNumber, isValidPostalCode } from '../utils/validation';
import { Product, PackageOption } from '../types';
import { useAuth } from '../context/AuthContext';
import { AuthError } from '@supabase/supabase-js';

interface CheckoutDisplayItem extends Product {
  packageOption: PackageOption;
  quantity: number;
}

interface PostalCodeSuggestion {
  code: string;
  city: string;
}

// Define states for the overall checkout flow
type CheckoutStep = 'selection' | 'guest_form' | 'auth_form' | 'registration_form';
// Define states for auth flow within checkout (when 'auth_form' is active)
type AuthSubState = 'initial' | 'login' | 'signup' | 'loggedIn';

// Simple UUID v4 generator
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

export const CheckoutPage: React.FC = () => {
  const { cart, clearCart } = useCart();
  const { t, i18n } = useTranslation();
  const navigate = useNavigate();
  const { user, session, loading: authLoading, signInWithPassword, signUp, checkEmailExists, signOut } = useAuth();

  const [cartItemsDetails, setCartItemsDetails] = useState<CheckoutDisplayItem[]>([]);
  const [loadingDetails, setLoadingDetails] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Fetch cart item details
  useEffect(() => {
    const fetchProductDetails = async () => {
      if (cart.length === 0) {
        setCartItemsDetails([]);
        setLoadingDetails(false);
        return;
      }

      setLoadingDetails(true);
      try {
        const productIds = cart.map(item => item.productId);
        const { data: products, error } = await supabase
          .from('products')
          .select('*, package_options(*)')
          .in('id', productIds);

        if (error) throw error;

        const detailedItems: CheckoutDisplayItem[] = [];

        cart.forEach(cartItem => {
          const product = products?.find(p => p.id === cartItem.productId);
          if (product) {
            const packageOption = product.package_options.find(
              (opt: PackageOption) => opt.uniq_id === cartItem.packageOptionId
            );

            if (packageOption) {
              detailedItems.push({
                ...product,
                packageOption,
                quantity: cartItem.quantity
              });
            }
          }
        });

        setCartItemsDetails(detailedItems);
      } catch (err) {
        console.error('Error fetching product details:', err);
        setError('Failed to load product details. Please try again.');
      } finally {
        setLoadingDetails(false);
      }
    };

    fetchProductDetails();
  }, [cart]);
  const [error, setError] = useState<string | null>(null); // General/Submission errors
  const [authError, setAuthError] = useState<string | null>(null); // Specific auth errors
  const [paymentMethod, setPaymentMethod] = useState<string>('pay_on_delivery');
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    address: '',
    city: '',
    postalCode: '',
    country: 'Slovenija',
    notes: '',
    password: '',
    confirmPassword: '',
  });

  // New state for managing checkout steps
  const [checkoutStep, setCheckoutStep] = useState<CheckoutStep>('selection');
  // State for managing login/signup within the auth path
  const [authSubState, setAuthSubState] = useState<AuthSubState>('initial');

  const [emailToCheck, setEmailToCheck] = useState<string>('');
  const [checkingEmail, setCheckingEmail] = useState<boolean>(false);

  const [postalSuggestions, setPostalSuggestions] = useState<PostalCodeSuggestion[]>([]);

  const commonPostalCodes: PostalCodeSuggestion[] = [
    { code: "1000", city: "Ljubljana" },
    { code: "2000", city: "Maribor" },
    { code: "3000", city: "Celje" },
    { code: "4000", city: "Kranj" },
    { code: "5000", city: "Nova Gorica" },
    { code: "6000", city: "Koper" }
  ];

  const handleInputChange = (nameOrEvent: string | React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>, valueParam?: string) => {
    // Handle both direct calls and event-based calls
    let name: string;
    let value: string;
    
    if (typeof nameOrEvent === 'string') {
      // Direct call with name and value
      name = nameOrEvent;
      value = valueParam || '';
    } else {
      // Event-based call
      name = nameOrEvent.target.name;
      value = nameOrEvent.target.value;
    }

    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Show postal code suggestions
    if (name === 'postalCode') {
      const suggestions = value ? commonPostalCodes.filter(p => 
        p.code.startsWith(value) || p.city.toLowerCase().includes(value.toLowerCase())
      ) : [];
      setPostalSuggestions(suggestions);
      
      // Auto-fill city when selecting from postal suggestions
      const match = commonPostalCodes.find(p => p.code === value);
      if (match) {
        setFormData(prev => ({ ...prev, city: match.city }));
        setPostalSuggestions([]);
      }
    }

    // If email changes during auth flow, reset sub-state and trigger check
    if (name === 'email' && checkoutStep === 'auth_form' && authSubState !== 'loggedIn') {
       setAuthSubState('initial');
       setAuthError(null); // Clear previous auth errors
       setEmailToCheck(value); // Set email to be checked on blur/submit
    }
     if (name === 'password') {
       setAuthError(null); // Clear auth error when password changes
     }
  };

   const handleEmailBlur = useCallback(async () => {
     // Only check email if in the auth flow and not already logged in
     if (checkoutStep !== 'auth_form' || authSubState === 'loggedIn' || !emailToCheck || checkingEmail) {
       return;
     }
     setCheckingEmail(true);
     setAuthError(null);
     try {
       const exists = await checkEmailExists(emailToCheck);
       if (exists) {
         setAuthSubState('login');
       } else {
         if (/\S+@\S+\.\S+/.test(emailToCheck)) {
            setAuthSubState('signup');
         } else {
            setAuthSubState('initial'); // Invalid email format
         }
       }
     } catch (e) {
       console.error("Email check failed:", e);
       setAuthError(t('checkout.errors.emailCheckFailed', 'Could not verify email. Please try again.'));
       setAuthSubState('initial'); // Reset on error
     } finally {
       setCheckingEmail(false);
     }
   }, [emailToCheck, checkEmailExists, checkoutStep, authSubState, checkingEmail, t]);


  const handlePaymentChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPaymentMethod(e.target.value);
  };

  const calculateSubtotal = () => {
    return cartItemsDetails.reduce((total, item) => {
      const price = item.packageOption?.price ?? 0;
      return total + price * item.quantity;
    }, 0);
  };

  const subtotal = calculateSubtotal();

  // Separate handler for Login/Signup actions before placing order
  const handleAuthAction = async (action: 'login' | 'signup') => {
     setAuthError(null);
     setIsSubmitting(true);

     let authResult: { error: AuthError | null } | null = null;

     try {
       if (action === 'login') {
         if (!formData.email || !formData.password) {
           setAuthError(t('checkout.errors.emailPasswordRequired', 'Email and password are required.'));
           setIsSubmitting(false);
           return;
         }
         authResult = await signInWithPassword({ email: formData.email, password: formData.password });
       } else if (action === 'signup') {
         if (!formData.email || !formData.password || !formData.confirmPassword) {
           setAuthError(t('checkout.errors.emailPasswordRequired', 'Email and password are required.'));
           setIsSubmitting(false);
           return;
         }
         if (formData.password !== formData.confirmPassword) {
           setAuthError(t('checkout.errors.passwordMismatch', 'Passwords do not match.'));
           setIsSubmitting(false);
           return;
         }
         authResult = await signUp({
            email: formData.email,
            password: formData.password,
            // Don't pass metadata here, we'll create the profile manually
         });
       }

       if (authResult?.error) {
         setAuthError(authResult.error.message);
         setIsSubmitting(false); // Stop submission on auth error
       } else {
         // Auth successful, state will change via onAuthStateChange listener
         // The useEffect for [user, authLoading] will update authSubState to 'loggedIn'
         // Keep checkoutStep as 'auth_form'
         // The user needs to review/complete the form and click "Place Order" again
         if (action === 'signup' && checkoutStep === 'registration_form') {
           // After successful signup, create a profile with all the information
           try {
             // Get the current user after signup
             const { data: { user: currentUser } = { user: null } } = await supabase.auth.getUser();
             
             if (currentUser && supabaseAdmin) {
               console.log("Creating profile with data:", {
                 id: currentUser.id,
                 username: formData.email,
                 full_name: formData.name,
                 email: formData.email,
                 telephone_nr: formData.phone,
                 default_shipping_address: {
                   address: formData.address,
                   city: formData.city,
                   postalCode: formData.postalCode,
                   country: formData.country,
                 }
               });
               
               try {
                 // Create a new profile with all the information
                 const { error: profileError } = await supabaseAdmin.from('profiles')
                   .upsert({
                     id: currentUser.id,
                     username: formData.email,
                     full_name: formData.name,
                     email: formData.email,
                     telephone_nr: formData.phone,
                     default_shipping_address: JSON.stringify({
                       address: formData.address,
                       city: formData.city,
                       postalCode: formData.postalCode,
                       country: formData.country,
                     }),
                   }, { onConflict: 'id' });
                   
                 if (profileError) {
                   console.error("Error creating/updating profile:", profileError);
                 } else {
                   console.log("Profile created/updated successfully");
                 }
               } catch (err) {
                 console.error("Error in profile operation:", err);
               }
             } else {
               console.error("User or admin client not available");
             }
           } catch (err) {
             console.error("Error in user lookup:", err);
           }
           
           // After successful registration, redirect to checkout
           setCheckoutStep('guest_form');
           setAuthSubState('loggedIn');
         } else {
           // Keep checkoutStep as 'auth_form'
           // The user needs to review/complete the form and click "Place Order" again
         }
         
         setIsSubmitting(false); // Allow user to proceed with form filling
         setError(null); // Clear any previous general errors
       }
     } catch (err: any) {
       console.error(`${action} error:`, err);
       setAuthError(t('checkout.errors.authActionFailed', `Could not ${action}. Please try again.`));
       setIsSubmitting(false); // Stop submission on unexpected error
     }
   };


  // Refactored order placement logic
  const placeOrder = async () => {
    setError(null);
    setAuthError(null); // Clear auth errors before placing order attempt

    const validationError = validateForm();
    if (validationError) {
      setError(validationError);
      return;
    }

    if (!paymentMethod) {
      setError(t('checkout.errorPaymentMethodRequired', 'Please select a payment method.'));
      return;
    }
     if (cart.length === 0 || loadingDetails) {
      setError(t('checkout.submitErrorCartEmpty', 'Cannot proceed with an empty cart.'));
      return;
    }

    setIsSubmitting(true); // Set submitting true only when starting the actual order placement

    // Ensure we have the latest user ID right before submission
    // Re-fetch user state directly from supabase client just in case context is stale
    const { data: { user: currentUser } = { user: null } } = await supabase.auth.getUser();
    const currentUserId = currentUser?.id || null;
    const isGuest = !currentUserId;

    // Double-check email consistency if logged in
    if (currentUser && currentUser.email !== formData.email) {
        console.warn("Form email differs from logged-in user email. Using logged-in user's email.");
        // Optionally update formData.email or notify user, for now proceed with currentUser.email
    }


    try {
      // 1. Find or Create Profile
      let profileId: string | null = null;

      if (currentUserId) {
          // User is logged in
          const { data: userProfile, error: profileFetchError } = await supabase
              .from('profiles')
              .select('id, full_name, telephone_nr, default_shipping_address') // Updated to match schema
              .eq('id', currentUserId)
              .maybeSingle();

          if (profileFetchError) throw new Error(`Profile lookup failed: ${profileFetchError.message}`);

          if (userProfile) {
              profileId = userProfile.id;
              console.log('Found profile for logged-in user:', profileId);
              // Update profile if form data is different (optional, consider UX)
              // Example: Check if formData.name is different and update
              // For now, we just use the existing profile ID.
              // Pre-fill form with profile data if it wasn't already done (e.g., if they logged in during checkout)
              if (!formData.name && userProfile.full_name) setFormData(prev => ({ ...prev, name: userProfile.full_name }));
              if (!formData.phone && userProfile.telephone_nr) setFormData(prev => ({ ...prev, phone: userProfile.telephone_nr }));
              // TODO: Parse and pre-fill address from userProfile.default_shipping_address if needed

          } else {
              // Logged-in user has no profile yet (e.g., signed up but didn't complete checkout before)
              console.log('Creating profile for logged-in user:', currentUserId);
              if (supabaseAdmin) {
                console.log("Creating profile with data:", {
                  id: currentUserId,
                  username: formData.email,
                  full_name: formData.name,
                  email: formData.email,
                  telephone_nr: formData.phone,
                  default_shipping_address: {
                    address: formData.address,
                    city: formData.city,
                    postalCode: formData.postalCode,
                    country: formData.country,
                  }
                });
                
                try {
                  // Create or update profile
                  const { error: profileError } = await supabaseAdmin.from('profiles')
                    .upsert({
                      id: currentUserId,
                      username: formData.email,
                      full_name: formData.name,
                      email: formData.email,
                      telephone_nr: formData.phone,
                      default_shipping_address: JSON.stringify({
                        address: formData.address,
                        city: formData.city,
                        postalCode: formData.postalCode,
                        country: formData.country,
                      }),
                    }, { onConflict: 'id' });
                    
                  if (profileError) {
                    console.error("Error creating/updating profile:", profileError);
                    throw new Error(`Profile creation/update failed: ${profileError.message}`);
                  } else {
                    console.log("Profile created/updated successfully");
                    profileId = currentUserId;
                  }
                } catch (err) {
                  console.error("Error in profile operation:", err);
                  throw err;
                }
              } else {
                console.error("Admin client not available for profile creation");
                throw new Error("Admin client not available for profile creation");
              }
          }
      } else {
          // Guest checkout
          console.log('Processing guest checkout for email:', formData.email);
          if (!supabaseAdmin) {
              throw new Error('Admin client not available for guest profile creation');
          }

          // Check if a profile exists with this email
          const { data: existingProfile, error: guestProfileError } = await supabaseAdmin
              .from('profiles')
              .select('id')
              .eq('email', formData.email)
              .maybeSingle();

          if (guestProfileError) throw new Error(`Guest profile lookup failed: ${guestProfileError.message}`);

          if (existingProfile) {
              // Found an existing profile. Reuse it.
              profileId = existingProfile.id;
              console.log('Found existing profile:', profileId);
              // Update profile details
              const { error: updateError } = await supabaseAdmin
                  .from('profiles')
                  .update({
                    full_name: formData.name,
                    telephone_nr: formData.phone,
                    default_shipping_address: JSON.stringify({
                      address: formData.address,
                      city: formData.city,
                      postalCode: formData.postalCode,
                      country: formData.country,
                    }),
                  })
                  .eq('id', profileId);
              
              if (updateError) throw new Error(`Failed to update profile: ${updateError.message}`);
          } else {
              // Create a new profile
              console.log('Creating new profile for email:', formData.email);
              const guestUUID = generateUUID();
              const { data: newProfile, error: insertProfileError } = await supabaseAdmin
                  .from('profiles')
                  .insert({
                    id: guestUUID,
                    username: formData.email,
                    full_name: formData.name,
                    email: formData.email,
                    telephone_nr: formData.phone,
                    default_shipping_address: JSON.stringify({
                      address: formData.address,
                      city: formData.city,
                      postalCode: formData.postalCode,
                      country: formData.country,
                    }),
                  })
                  .select('id')
                  .single();

              if (insertProfileError) throw new Error(`Profile creation failed: ${insertProfileError.message}`);
              if (!newProfile) throw new Error('Profile creation returned no data.');
              profileId = newProfile.id;
              console.log('Created new profile:', profileId);
          }
      }


      if (!profileId) {
        throw new Error('Failed to obtain profile ID.');
      }

      // 2. Prepare Order Data
      const orderItems = cartItemsDetails.map((item: CheckoutDisplayItem) => ({
        product_id: item.id,
        product_name: item[`name_${i18n.language}` as keyof Product] || item.name,
        package_option_id: item.packageOption.uniq_id,
        package_description: item.packageOption.weight || item.packageOption.description || '',
        quantity: item.quantity,
        price_per_unit: item.packageOption.price,
        line_total: item.packageOption.price * item.quantity,
      }));

      const shippingAddress = {
        name: formData.name,
        address: formData.address,
        city: formData.city,
        postalCode: formData.postalCode,
        country: formData.country,
        phone: formData.phone,
        email: formData.email, // Include email in shipping address for confirmation emails etc.
      };

      // 3. Create Order
      console.log('Creating order with profile_id:', profileId, 'user_id:', currentUserId, 'is_guest:', isGuest);
      const { data: newOrder, error: orderError } = await supabase
        .from('orders')
        .insert({
          profile_id: profileId,
          total_price: subtotal,
          status: 'pending',
          items: JSON.stringify(orderItems),
          shipping_address: JSON.stringify(shippingAddress),
          notes: formData.notes,
          payment_method: paymentMethod,
          is_guest_order: isGuest,
          // currency: 'EUR', // Consider adding currency if needed
        })
        .select('id')
        .single();

      if (orderError) throw new Error(`Order creation failed: ${orderError.message}`);
      if (!newOrder) throw new Error('Order creation returned no data.');

      console.log('Order created successfully:', newOrder.id);

      // 4. Post-Order Actions
      clearCart();
      navigate(`/?lang=${i18n.language}&order_success=true&order_id=${newOrder.id}`);

    } catch (err: any) {
      console.error("Order placement error:", err);
      setError(err.message || t('checkout.submitErrorGeneral', 'An unexpected error occurred. Please try again.'));
    } finally {
      setIsSubmitting(false); // Ensure submitting is set to false after attempt
    }
  };

  // Validation functions
  const isValidPostalCode = (postalCode: string): boolean => {
    // Slovenian postal code format: 4 digits
    const slovenianPostalCodeRegex = /^\d{4}$/;
    return slovenianPostalCodeRegex.test(postalCode);
  };

  const isValidCity = (city: string): boolean => {
    return city.trim().length >= 2; // City should be at least 2 characters
  };

  const validateForm = (): string | null => {
    if (!formData.name.trim()) {
      return t('checkout.errors.nameRequired', 'Name is required.');
    }
    if (!formData.email.trim()) {
      return t('checkout.errors.emailRequired', 'Email is required.');
    }
    if (!formData.phone.trim()) {
      return t('checkout.errors.phoneRequired', 'Phone number is required.');
    }
    if (!formData.address.trim()) {
      return t('checkout.errors.addressRequired', 'Address is required.');
    }
    if (!formData.city.trim()) {
      return t('checkout.errors.cityRequired', 'City is required.');
    }
    if (!isValidCity(formData.city)) {
      return t('checkout.errors.invalidCity', 'Please enter a valid city name.');
    }
    if (!formData.postalCode.trim()) {
      return t('checkout.errors.postalCodeRequired', 'Postal code is required.');
    }
    if (!isValidPostalCode(formData.postalCode)) {
      return t('checkout.errors.invalidPostalCode', 'Please enter a valid 4-digit postal code.');
    }
    if (!formData.country.trim()) {
      return t('checkout.errors.countryRequired', 'Country is required.');
    }
    return null;
  };

  // Main form submission handler - Now decides based on checkoutStep
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null); // Clear general errors on new submission attempt
    setAuthError(null); // Clear auth errors

    // If user is in the auth flow (login/signup state), handle that first
    if (checkoutStep === 'auth_form') {
        if (authSubState === 'login') {
            await handleAuthAction('login');
            // Don't proceed to placeOrder automatically, user needs to click again after login
            return; // Stop further execution in this submit handler
        } else if (authSubState === 'signup') {
            await handleAuthAction('signup');
            // Don't proceed to placeOrder automatically, user needs to click again after signup
            return; // Stop further execution in this submit handler
        }
        // If already loggedIn or in initial state within auth_form, proceed to placeOrder
    }

    // If guest or already authenticated, proceed to place the order
    await placeOrder();
  };


  // Loading states
  if (authLoading || loadingDetails) {
    console.log('Checkout page loading...', { authLoading, loadingDetails });
    return <div className="container mx-auto px-4 py-8 text-center">{t('checkout.loading', 'Nalaganje blagajne...')}</div>;
  }

  // Cart empty state
   if (!loadingDetails && cart.length === 0 && !isSubmitting) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        <h1 className="text-2xl font-semibold mb-4">{t('checkout.cartEmptyTitle', 'Vaša košarica je prazna')}</h1>
        <p className="mb-6">{t('checkout.cartEmptyText', 'Potrebujete izdelke v košarici, da lahko nadaljujete z blagajno.')}</p>
        <button
          onClick={() => navigate(`/?lang=${i18n.language}`)}
          className="bg-brown-600 hover:bg-brown-700 text-white font-bold py-2 px-6 rounded"
        >
          {t('cart.continueShopping', 'Nadaljujte z nakupovanjem')}
        </button>
      </div>
    );
  }

  // Render different content based on checkoutStep
  console.log('Checkout rendering with state:', {
    checkoutStep,
    authSubState,
    user: user ? 'logged in' : 'not logged in',
    cartItems: cart.length,
    cartItemsDetails: cartItemsDetails.length,
    loadingDetails,
    isSubmitting,
    paymentMethod
  });
  
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      <h1 className="text-3xl font-bold mb-8 text-center">{t('checkout.title', 'Blagajna')}</h1>
      
      {/* Debug info */}
      <div className="bg-yellow-50 p-4 mb-4 rounded-md text-sm">
        <p>Debug: checkoutStep = {checkoutStep}, authSubState = {authSubState}</p>
        <p>Cart items: {cart.length}, Details loaded: {cartItemsDetails.length}, Payment: {paymentMethod}</p>
      </div>

      {/* Step 1: Selection */}
      {checkoutStep === 'selection' && !user && (
        <div className="bg-white p-6 rounded shadow mb-8">
          <h2 className="text-xl font-semibold mb-6 text-center">{t('checkout.howToProceed', 'Kako želite nadaljevati?')}</h2>
          <div className="flex flex-col md:flex-row gap-4 justify-center">
            <button
              onClick={() => setCheckoutStep('guest_form')}
              className="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded text-lg"
            >
              {t('checkout.continueAsGuest', 'Nadaljujte kot gost')}
            </button>
            <button
              onClick={() => {
                setCheckoutStep('registration_form');
                setAuthSubState('signup');
              }}
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded text-lg"
            >
              {t('checkout.register', 'Registracija')}
            </button>
            <button
              onClick={() => {
                setCheckoutStep('auth_form');
                setAuthSubState('login');
              }}
              className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded text-lg"
            >
              {t('checkout.login', 'Prijava')}
            </button>
          </div>
        </div>
      )}

      {/* Registration Form */}
      {authSubState === 'signup' && (
        <div className="space-y-6">
          <div>
            <h2 className="text-xl font-semibold mb-4">{t('checkout.registration', 'Registracija')}</h2>
            <p className="text-sm text-gray-600 mb-6">
              {t('checkout.createAccountBenefit', 'Ustvarite račun za hitrejše naslednje nakupe.')}
            </p>
          </div>

          <div>
            <h3 className="text-lg font-medium mb-4">{t('checkout.accountDetails', 'Podatki o računu')}</h3>
            
            {/* Email */}
            <div className="mb-4">
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                {t('checkout.email', 'Email Address')}
              </label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={(e) => handleInputChange(e)}
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
              />
            </div>

            {/* Password */}
            <div className="mb-4">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                {t('checkout.password', 'Password')}
              </label>
              <div className="relative">
                <input
                  type={showPassword ? "text" : "password"}
                  id="password"
                  name="password"
                  value={formData.password}
                  onChange={(e) => handleInputChange(e)}
                  required
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-2 top-1/2 -translate-y-1/2 text-sm text-gray-600 hover:text-gray-800"
                >
                  {showPassword ? t('checkout.hide', 'Skrij') : t('checkout.show', 'Pokaži')}
                </button>
              </div>
            </div>

            {/* Confirm Password */}
            <div className="mb-6">
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                {t('checkout.confirmPassword', 'Ponovite geslo')}
              </label>
              <div className="relative">
                <input
                  type={showPassword ? "text" : "password"}
                  id="confirmPassword"
                  name="confirmPassword"
                  value={formData.confirmPassword}
                  onChange={(e) => handleInputChange(e)}
                  required
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-2 top-1/2 -translate-y-1/2 text-sm text-gray-600 hover:text-gray-800"
                >
                  {showPassword ? t('checkout.hide', 'Skrij') : t('checkout.show', 'Pokaži')}
                </button>
              </div>
            </div>

            {/* Full Name */}
            <div className="mb-4">
              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                {t('checkout.fullName', 'Full Name')}
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={(e) => handleInputChange(e)}
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
              />
            </div>

            {/* Street Address */}
            <div className="mb-4">
              <label htmlFor="address" className="block text-sm font-medium text-gray-700">
                {t('checkout.address', 'Street Address')}
              </label>
              <input
                type="text"
                id="address"
                name="address"
                value={formData.address}
                onChange={(e) => handleInputChange(e)}
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
              />
            </div>

            {/* City */}
            <div className="mb-4">
              <label htmlFor="city" className="block text-sm font-medium text-gray-700">
                {t('checkout.city', 'City')}
              </label>
              <input
                type="text"
                id="city"
                name="city"
                value={formData.city}
                onChange={(e) => handleInputChange(e)}
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
              />
            </div>

            {/* Postal Code */}
            <div className="mb-4">
              <label htmlFor="postalCode" className="block text-sm font-medium text-gray-700">
                {t('checkout.postalCode', 'Poštna številka')}
              </label>
              <div className="relative">
                <input
                  type="text"
                  id="postalCode"
                  name="postalCode"
                  value={formData.postalCode}
                  onChange={(e) => handleInputChange(e)}
                  required
                  maxLength={4}
                  placeholder="1000"
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                />
                {postalSuggestions.length > 0 && (
                  <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg">
                    {postalSuggestions.map((suggestion) => (
                      <button
                        key={suggestion.code}
                        type="button"
                        onClick={() => {
                          handleInputChange('postalCode', suggestion.code);
                          handleInputChange('city', suggestion.city);
                          setPostalSuggestions([]);
                        }}
                        className="w-full px-4 py-2 text-left hover:bg-gray-100"
                      >
                        {suggestion.code} - {suggestion.city}
                      </button>
                    ))}
                  </div>
                )}
              </div>
              <small className="text-sm text-gray-500">
                {t('checkout.postalCodeFormat', 'Vnesite 4-mestno poštno številko')}
              </small>
            </div>

            {/* Country */}
            <div className="mb-4">
              <label htmlFor="country" className="block text-sm font-medium text-gray-700">
                {t('checkout.country', 'Država')}
              </label>
              <select
                id="country"
                name="country"
                value={formData.country}
                onChange={(e) => handleInputChange(e)}
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
              >
                <option value="Slovenija">Slovenija</option>
                <option value="Hrvaška">Hrvaška</option>
                <option value="Avstrija">Avstrija</option>
              </select>
            </div>

            {/* Phone Number */}
            <div className="mb-6">
              <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
                {t('checkout.phone', 'Telefonska številka')}
              </label>
              <input
                type="tel"
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={(e) => handleInputChange(e)}
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
              />
            </div>
          </div>

          {/* Use address for shipping checkbox */}
          <div className="mb-6">
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={true} // Always checked for simplicity
                className="h-4 w-4 text-brown-600 focus:ring-brown-500 border-gray-300"
              />
              <span className="ml-2 text-sm text-gray-700">{t('checkout.useAddressForShipping', 'Ta naslov uporabi tudi za dostavo')}</span>
            </label>
          </div>

          {/* Error Messages */}
          {error && (
            <div className="mb-4 p-3 bg-red-100 text-red-700 rounded text-sm">
              {error}
            </div>
          )}
          {authError && (
            <div className="mb-4 p-3 bg-red-100 text-red-700 rounded text-sm">
              {authError}
            </div>
          )}

          {/* Navigation Buttons */}
          <div className="flex justify-between items-center">
            <button
              type="button"
              onClick={() => setAuthSubState('initial')}
              className="text-sm text-gray-600 hover:text-gray-800"
            >
              {t('checkout.back', 'Nazaj')}
            </button>
            <button
              type="submit"
              onClick={handleSubmit}
              disabled={isSubmitting}
              className="bg-brown-600 text-white px-6 py-2 rounded-md hover:bg-brown-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brown-500"
            >
              {isSubmitting ? (
                <span>{t('checkout.submitting', 'Processing...')}</span>
              ) : (
                <span>{t('checkout.submit', 'Continue')}</span>
              )}
            </button>
          </div>
        </div>
      )}

      {/* Step 2 & 3: Form (Guest or Auth) */}
      {(checkoutStep === 'guest_form' || checkoutStep === 'auth_form') && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {/* Order Summary */}
          <div className="bg-white p-6 rounded shadow order-last md:order-first">
            <h2 className="text-xl font-semibold mb-4">{t('checkout.orderSummary', 'Povzetek naročila')}</h2>
            {cartItemsDetails.length > 0 ? (
              <ul className="divide-y divide-gray-200 mb-4">
                {cartItemsDetails.map((item) => (
                  <li key={`${item.id}-${item.packageOption.uniq_id}`} className="py-3 flex justify-between items-center">
                    <div>
                      <span className="font-medium">{item[`name_${i18n.language}` as keyof Product] || item.name}</span>
                      <span className="text-sm text-gray-500 block">
                        ({item.packageOption.weight || item.packageOption.description}) x {item.quantity}
                      </span>
                    </div>
                    <span className="font-medium">{(item.packageOption.price * item.quantity).toFixed(2)} €</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p>{t('checkout.noItems', 'Ni izdelkov v košarici.')}</p>
            )}
            <div className="border-t pt-4">
              <div className="flex justify-between font-semibold text-lg">
                <span>{t('cart.subtotal', 'Vmesni seštevek')}</span>
                <span>{subtotal.toFixed(2)} €</span>
              </div>
              <p className="text-sm text-gray-500 mt-1">{t('cart.checkoutInfo', 'Poštnina se obračuna posebej.')}</p>
            </div>
             {/* Back button if not logged in initially */}
             {checkoutStep !== 'selection' && !user && (
                 <button
                    onClick={() => {
                        setCheckoutStep('selection');
                        setError(null);
                        setAuthError(null);
                        // Optionally clear form data?
                        // setFormData({ name: '', email: '', phone: '', address: '', city: '', postalCode: '', country: 'Slovenija', notes: '', password: '' });
                    }}
                    className="mt-6 text-sm text-blue-600 hover:underline"
                 >
                    &larr; {t('checkout.backToOptions', 'Nazaj na možnosti')}
                 </button>
             )}
          </div>

          {/* Shipping & Payment Form */}
          <div className="bg-white p-6 rounded shadow">
            <form onSubmit={handleSubmit}>
              {/* Display general submission errors */}
               {error && (
                 <div className="mb-4 p-3 bg-red-100 text-red-700 rounded text-sm">
                   {error}
                 </div>
               )}

               {/* Auth Section (Only shown in auth_form step) */}
               {checkoutStep === 'auth_form' && (
                 <div className="mb-6 p-4 border rounded bg-gray-50">
                    <h2 className="text-lg font-semibold mb-3">{t('checkout.accountInfo', 'Podatki o računu')}</h2>
                    {authSubState === 'loggedIn' ? (
                        <div className="flex justify-between items-center">
                            <p className="text-sm text-green-700">{t('checkout.loggedInAs', 'Prijava kot:')} <strong>{user?.email}</strong></p>
                            <button type="button" onClick={signOut} className="text-sm text-red-600 hover:underline">
                                {t('auth.logout', 'Odjava')}
                            </button>
                        </div>
                    ) : (
                        <>
                            <div>
                                <label htmlFor="email" className="block text-sm font-medium text-gray-700">{t('checkout.form.email', 'Email naslov')}</label>
                                <input
                                    type="email"
                                    id="email"
                                    name="email"
                                    value={formData.email}
                                    onChange={(e) => handleInputChange(e)}
                                    onBlur={handleEmailBlur}
                                    required
                                    className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                                    disabled={checkingEmail}
                                />
                                 {checkingEmail && <p className="text-sm text-gray-500 mt-1">{t('checkout.checkingEmail', 'Preverjanje emaila...')}</p>}
                            </div>

                            {authSubState === 'login' && (
                                <div className="mt-3">
                                    <p className="text-sm text-blue-700 mb-2">{t('checkout.promptLogin', 'Račun obstaja za ta email. Prosimo, prijavite se.')}</p>
                                    <label htmlFor="password" className="block text-sm font-medium text-gray-700">{t('checkout.form.password', 'Geslo')}</label>
                                    <div className="relative">
                                      <input
                                        type={showPassword ? "text" : "password"}
                                        id="password"
                                        name="password"
                                        value={formData.password}
                                        onChange={(e) => handleInputChange(e)}
                                        required
                                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                                      />
                                      <button
                                        type="button"
                                        className="absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5"
                                        onClick={() => setShowPassword(!showPassword)}
                                      >
                                        {showPassword ? "Skrij" : "Pokaži"}
                                      </button>
                                    </div>
                                    {/* Add Forgot Password link later */}
                                </div>
                            )}

                            {authSubState === 'signup' && (
                                 <div className="mt-3">
                                    <p className="text-sm text-blue-700 mb-4">{t('checkout.promptSignup', 'Ustvarite račun za hitrejše naslednje nakupe.')}</p>
                                    <h3 className="font-medium text-gray-800 mb-3">{t('checkout.accountDetails', 'Podatki o računu')}</h3>
                                    
                                    {/* Email is already shown above */}
                                    
                                    {/* Password */}
                                    <div className="mb-3">
                                        <label htmlFor="password" className="block text-sm font-medium text-gray-700">{t('checkout.form.password', 'Geslo')}</label>
                                        <div className="relative">
                                          <input
                                            type={showPassword ? "text" : "password"}
                                            id="password"
                                            name="password"
                                            value={formData.password}
                                            onChange={(e) => handleInputChange(e)}
                                            required
                                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                                          />
                                          <button
                                            type="button"
                                            className="absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5"
                                            onClick={() => setShowPassword(!showPassword)}
                                          >
                                            {showPassword ? "Skrij" : "Pokaži"}
                                          </button>
                                        </div>
                                    </div>
                                    
                                    {/* Confirm Password */}
                                    <div className="mb-3">
                                        <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">{t('checkout.form.confirmPassword', 'Ponovite geslo')}</label>
                                        <div className="relative">
                                          <input
                                            type={showPassword ? "text" : "password"}
                                            id="confirmPassword"
                                            name="confirmPassword"
                                            onChange={(e) => {
                                              if (e.target.value !== formData.password) {
                                                setAuthError(t('checkout.errors.passwordMismatch', 'Gesli se ne ujemata'));
                                              } else {
                                                setAuthError(null);
                                              }
                                              setFormData(prev => ({ ...prev, confirmPassword: e.target.value }));
                                            }}
                                            required
                                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                                          />
                                          <button
                                            type="button"
                                            className="absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5"
                                            onClick={() => setShowPassword(!showPassword)}
                                          >
                                            {showPassword ? "Skrij" : "Pokaži"}
                                          </button>
                                        </div>
                                    </div>
                                    
                                    {/* Full Name */}
                                    <div className="mb-3">
                                        <label htmlFor="name" className="block text-sm font-medium text-gray-700">{t('checkout.form.name', 'Polno ime')}</label>
                                        <input
                                            type="text"
                                            id="name"
                                            name="name"
                                            value={formData.name}
                                            onChange={(e) => handleInputChange(e)}
                                            required
                                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                                        />
                                    </div>
                                    
                                    {/* Address */}
                                    <div className="mb-3">
                                        <label htmlFor="address" className="block text-sm font-medium text-gray-700">{t('checkout.form.address', 'Naslov')}</label>
                                        <input
                                            type="text"
                                            id="address"
                                            name="address"
                                            value={formData.address}
                                            onChange={(e) => handleInputChange(e)}
                                            required
                                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                                        />
                                    </div>
                                    
                                    {/* Phone */}
                                    <div className="mb-3">
                                        <label htmlFor="phone" className="block text-sm font-medium text-gray-700">{t('checkout.form.phone', 'Telefon')}</label>
                                        <input
                                            type="tel"
                                            id="phone"
                                            name="phone"
                                            value={formData.phone}
                                            onChange={(e) => handleInputChange(e)}
                                            required
                                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                                        />
                                    </div>
                                    
                                    {/* City */}
                                    <div className="mb-3">
                                        <label htmlFor="city" className="block text-sm font-medium text-gray-700">{t('checkout.form.city', 'Mesto')}</label>
                                        <input
                                            type="text"
                                            id="city"
                                            name="city"
                                            value={formData.city}
                                            onChange={(e) => handleInputChange(e)}
                                            required
                                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                                        />
                                    </div>
                                    
                                    {/* Postal Code */}
                                    <div className="mb-3">
                                        <label htmlFor="postalCode" className="block text-sm font-medium text-gray-700">{t('checkout.form.postalCode', 'Poštna številka')}</label>
                                        <div className="relative">
                                          <input
                                            type="text"
                                            id="postalCode"
                                            name="postalCode"
                                            value={formData.postalCode}
                                            onChange={(e) => handleInputChange(e)}
                                            required
                                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                                            placeholder="1000"
                                            maxLength={4}
                                          />
                                          {postalSuggestions.length > 0 && (
                                            <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg">
                                              {postalSuggestions.map((suggestion) => (
                                                <button
                                                  key={suggestion.code}
                                                  type="button"
                                                  onClick={() => {
                                                    handleInputChange('postalCode', suggestion.code);
                                                    handleInputChange('city', suggestion.city);
                                                    setPostalSuggestions([]);
                                                  }}
                                                  className="w-full px-4 py-2 text-left hover:bg-gray-100"
                                                >
                                                  {suggestion.code} - {suggestion.city}
                                                </button>
                                              ))}
                                            </div>
                                          )}
                                        </div>
                                        <small className="form-text text-muted">
                                          {t('checkout.postalCodeFormat', 'Enter a 4-digit postal code')}
                                        </small>
                                    </div>
                                    
                                    {/* Country */}
                                    <div className="mb-3">
                                        <label htmlFor="country" className="block text-sm font-medium text-gray-700">{t('checkout.form.country', 'Država')}</label>
                                        <select
                                          id="country"
                                          name="country"
                                          value={formData.country}
                                          onChange={(e) => handleInputChange(e)}
                                          required
                                          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                                        >
                                          <option value="Slovenija">Slovenija</option>
                                          <option value="Hrvaška">Hrvaška</option>
                                          <option value="Avstrija">Avstrija</option>
                                        </select>
                                    </div>
                                    {/* Use address for shipping checkbox */}
                                    <div className="mb-3">
                                        <label className="flex items-center">
                                            <input
                                                type="checkbox"
                                                checked={true} // Always checked for simplicity
                                                className="h-4 w-4 text-brown-600 focus:ring-brown-500 border-gray-300"
                                            />
                                            <span className="ml-2 text-sm text-gray-700">{t('checkout.form.useAddressForShipping', 'Ta naslov uporabi tudi za dostavo')}</span>
                                        </label>
                                    </div>
                                </div>
                            )}
                             {/* Display Auth Errors */}
                             {authError && (
                               <div className="mt-3 p-2 bg-red-100 text-red-700 rounded text-sm">
                                 {authError}
                               </div>
                             )}
                             {/* Login/Signup Button within Auth section */}
                             {(authSubState === 'login' || authSubState === 'signup') && (
                                <button
                                    type="button" // Important: prevent form submission
                                    onClick={() => handleAuthAction(authSubState)}
                                    disabled={isSubmitting || checkingEmail || !formData.email || !formData.password}
                                    className={`mt-4 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-white ${isSubmitting || checkingEmail || !formData.email || !formData.password ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'}`}
                                >
                                    {isSubmitting ? t('checkout.submitting', 'Obravnavanje...') :
                                     authSubState === 'login' ? t('auth.login', 'Prijava') :
                                     t('auth.signup', 'Registracija')}
                                </button>
                             )}
                        </>
                    )}
                 </div>
               )}


               {/* Shipping Information */}
               <h2 className="text-xl font-semibold mb-4">{t('checkout.shippingInfo', 'Podatki za dostavo')}</h2>
               {/* Show email field for guests */}
               {checkoutStep === 'guest_form' && (
                    <div className="mb-4">
                        <label htmlFor="email" className="block text-sm font-medium text-gray-700">{t('checkout.form.email', 'Email naslov')}</label>
                        <input type="email" id="email" name="email" value={formData.email} onChange={(e) => handleInputChange(e)} required className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500" />
                    </div>
               )}

              <div className="grid grid-cols-1 gap-4 mb-6">
                {/* Name, Phone, Address fields */}
                 <div>
                  <label htmlFor="name" className="block text-sm font-medium text-gray-700">{t('checkout.form.name', 'Polno ime')}</label>
                  <input type="text" id="name" name="name" value={formData.name} onChange={(e) => handleInputChange(e)} required className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500" />
                </div>
                <div>
                  <label htmlFor="phone" className="block text-sm font-medium text-gray-700">{t('checkout.form.phone', 'Telefonska številka')}</label>
                  <input type="tel" id="phone" name="phone" value={formData.phone} onChange={(e) => handleInputChange(e)} required className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500" />
                </div>
                <div>
                  <label htmlFor="address" className="block text-sm font-medium text-gray-700">{t('checkout.form.address', 'Naslov ulice')}</label>
                  <input type="text" id="address" name="address" value={formData.address} onChange={(e) => handleInputChange(e)} required className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500" />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="city" className="block text-sm font-medium text-gray-700">{t('checkout.form.city', 'Mesto')}</label>
                    <input type="text" id="city" name="city" value={formData.city} onChange={(e) => handleInputChange(e)} required className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500" />
                  </div>
                  <div>
                    <label htmlFor="postalCode" className="block text-sm font-medium text-gray-700">{t('checkout.form.postalCode', 'Poštna številka')}</label>
                    <div className="relative">
                      <input
                        type="text"
                        id="postalCode"
                        name="postalCode"
                        value={formData.postalCode}
                        onChange={(e) => handleInputChange(e)}
                        required
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                        placeholder="1000"
                        maxLength={4}
                      />
                      {postalSuggestions.length > 0 && (
                        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg">
                          {postalSuggestions.map((suggestion) => (
                            <button
                              key={suggestion.code}
                              type="button"
                              onClick={() => {
                                handleInputChange('postalCode', suggestion.code);
                                handleInputChange('city', suggestion.city);
                                setPostalSuggestions([]);
                              }}
                              className="w-full px-4 py-2 text-left hover:bg-gray-100"
                            >
                              {suggestion.code} - {suggestion.city}
                            </button>
                          ))}
                        </div>
                      )}
                      <small className="form-text text-muted">
                        {t('checkout.postalCodeFormat', 'Enter a 4-digit postal code')}
                      </small>
                    </div>
                  </div>
                </div>
                 <div>
                   <label htmlFor="country" className="block text-sm font-medium text-gray-700">{t('checkout.form.country', 'Država')}</label>
                   <select
                     id="country"
                     name="country"
                     value={formData.country}
                     onChange={(e) => handleInputChange(e)}
                     required
                     className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"
                   >
                     <option value="Slovenija">Slovenija</option>
                     <option value="Hrvaška">Hrvaška</option>
                     <option value="Avstrija">Avstrija</option>
                   </select>
                 </div>
                 <div>
                   <label htmlFor="notes" className="block text-sm font-medium text-gray-700">{t('checkout.form.notes', 'Opombe k naročilu (neobvezno)')}</label>
                   <textarea id="notes" name="notes" value={formData.notes} onChange={(e) => handleInputChange(e)} rows={3} className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brown-500 focus:border-brown-500"></textarea>
                 </div>
              </div>

              {/* Payment Information */}
              <div className="mt-6 border-t pt-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">{t('checkout.paymentInfo', 'Podatki o plačilu')}</h3>
                 <fieldset>
                   <legend className="sr-only">{t('checkout.paymentMethod', 'Način plačila')}</legend>
                   <div className="space-y-4">
                     {/* Pay on Delivery */}
                     <div className="flex items-center">
                       <input
                         id="pay_on_delivery"
                         name="paymentMethod"
                         type="radio"
                         value="pay_on_delivery"
                         checked={paymentMethod === 'pay_on_delivery'}
                         onChange={handlePaymentChange}
                         required
                         className="focus:ring-brown-500 h-4 w-4 text-brown-600 border-gray-300"
                       />
                       <label htmlFor="pay_on_delivery" className="ml-3 block text-sm font-medium text-gray-700">
                         {t('checkout.paymentOptions.payOnDelivery', 'Plačilo po povzetju')}
                       </label>
                     </div>
                     {/* Direct Bank Transfer */}
                     <div className="flex items-center">
                       <input
                         id="bank_transfer"
                         name="paymentMethod"
                         type="radio"
                         value="bank_transfer"
                         checked={paymentMethod === 'bank_transfer'}
                         onChange={handlePaymentChange}
                         required
                         className="focus:ring-brown-500 h-4 w-4 text-brown-600 border-gray-300"
                       />
                       <label htmlFor="bank_transfer" className="ml-3 block text-sm font-medium text-gray-700">
                         {t('checkout.paymentOptions.bankTransfer', 'Neposredno bančno nakazilo')}
                       </label>
                     </div>
                   </div>
                 </fieldset>
                 <p className="mt-4 text-sm text-gray-600">
                   {paymentMethod === 'bank_transfer'
                     ? t('checkout.paymentInstructions.bankTransfer', 'Navodila za bančno nakazilo bodo poslana na vaš e-poštni naslov po potrditvi naročila.')
                     : paymentMethod === 'pay_on_delivery'
                     ? t('checkout.paymentInstructions.payOnDelivery', 'Prosimo, da imate ob dostavi pripravljen točen znesek.')
                     : t('checkout.paymentInstructions.selectMethod', 'Izberite način plačila zgoraj.')}
                 </p>
              </div>

              {/* Place Order Button */}
              <div className="mt-8 border-t pt-6">
                {/* The main submit button now always says "Place Order" when visible */}
                {/* We disable it if the user needs to login/signup first */}
                <button
                  type="submit"
                  disabled={
                    isSubmitting ||
                    cart.length === 0 ||
                    loadingDetails ||
                    !paymentMethod ||
                    checkingEmail ||
                    authLoading ||
                    (checkoutStep === 'auth_form' && (authSubState === 'login' || authSubState === 'signup')) // Disable if login/signup is pending
                  }
                  className={`w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-white ${
                    isSubmitting || cart.length === 0 || loadingDetails || !paymentMethod || checkingEmail || authLoading || (checkoutStep === 'auth_form' && (authSubState === 'login' || authSubState === 'signup'))
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-brown-600 hover:bg-brown-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brown-500'
                  }`}
                >
                  {isSubmitting ? t('checkout.submitting', 'Oddajanje naročila...') : t('checkout.placeOrder', 'Oddaj naročilo')}
                </button>
                {/* Inform user they need to login/signup first if button is disabled for that reason */}
                {checkoutStep === 'auth_form' && (authSubState === 'login' || authSubState === 'signup') && !isSubmitting && (
                    <p className="text-center text-sm text-red-600 mt-2">
                        {authSubState === 'login' ? t('checkout.errors.mustLoginFirst', 'Prosimo, prijavite se pred oddajo naročila.') : t('checkout.errors.mustSignupFirst', 'Prosimo, registrirajte se pred oddajo naročila.')}
                    </p>
                )}
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};
