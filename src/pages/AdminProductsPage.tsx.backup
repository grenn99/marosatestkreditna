import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';
import { useTranslation } from 'react-i18next';

interface PackageOption {
  uniq_id: string;
  price: number;
  weight?: string;
  description?: string;
  stock: number | null; // Allow null values for stock as seen in the database
  isActive: boolean;
}

interface Product {
  id: number;
  name: string;
  name_en: string;
  name_de: string;
  name_hr: string;
  description: string;
  description_en: string;
  description_de: string;
  description_hr: string;
  image_url: string;
  isActive: boolean;
  stock_quantity: number;
  package_options: PackageOption[];
  category: string;
  price: number | null;
}

export const AdminProductsPage: React.FC = () => {
  const { t } = useTranslation();
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null); 
  const [editFormData, setEditFormData] = useState<Partial<Product>>({});
  const [showAddProductModal, setShowAddProductModal] = useState(false);
  const [newProductData, setNewProductData] = useState<Partial<Product>>({ isActive: true }); // Default isActive to true

  // --- Data Fetching ---
  const fetchProducts = async () => {
    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('products')
        .select('*');

      if (error) throw error;

      const productsWithParsedOptions = data.map((product: any) => ({
        ...product,
        stock_quantity: product.stock_quantity || 0,
        package_options: typeof product.package_options === 'string' 
          ? JSON.parse(product.package_options) 
          : product.package_options
      }));

      setProducts(productsWithParsedOptions);
    } catch (err: any) {
      console.error('Error fetching products:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  useEffect(() => {
    if (editingProduct) {
      // When editingProduct changes, initialize editFormData
      setEditFormData({
        ...editingProduct, 
        // Ensure package_options is a deep copy if it exists, otherwise empty array
        package_options: editingProduct.package_options ? JSON.parse(JSON.stringify(editingProduct.package_options)) : [] 
      });
    } else {
      setEditFormData({}); // Clear form data when not editing
    }
  }, [editingProduct]);

  // --- Translation Helpers (used by Add and Edit) ---
  // Shorthand functions for specific languages
  const translateToEnglish = async (text: string): Promise<string> => {
    console.log(`Simulating translation to English for: ${text}`);
    // Replace with actual translation logic if needed, otherwise return original
    return text; 
  };
  const translateToGerman = async (text: string): Promise<string> => {
    console.log(`Simulating translation to German for: ${text}`);
    // Replace with actual translation API call
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 500)); 
    return `${text} (German translation)`; 
  };
  const translateToCroatian = async (text: string): Promise<string> => {
    console.log(`Simulating translation to Croatian for: ${text}`);
    // Replace with actual translation API call
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 500)); 
    return `${text} (Croatian translation)`; 
  };

  // Handle clicking the translate button for a specific field in ADD modal
  const handleTranslateNewField = async (fieldName: 'name' | 'description', targetLang: 'en' | 'de' | 'hr') => {
    // Ensure newProductData is not null or empty before accessing fieldName
    if (!newProductData || !newProductData[fieldName]) {
        alert(`Please enter the Slovenian ${fieldName} first.`);
        return;
    }
    const baseSlovenianValue = newProductData[fieldName];

    let translateFunction: (text: string) => Promise<string>;
    switch (targetLang) {
      case 'en': translateFunction = translateToEnglish; break;
      case 'de': translateFunction = translateToGerman; break;
      case 'hr': translateFunction = translateToCroatian; break;
      default: return; // Should not happen
    }

    try {
      setLoading(true); // Indicate translation is in progress
      const translatedText = await translateFunction(baseSlovenianValue!);
      const targetFieldName = `${fieldName}_${targetLang}` as keyof Product;
      console.log(`[Translate New] Target Field: ${targetFieldName}, Translated Text: ${translatedText}`);
      setNewProductData(prev => {
        const newState = { ...prev, [targetFieldName]: translatedText };
        console.log('[Translate New] State updated (next render):', newState);
        return newState;
      });
    } catch (error) {
      console.error(`Error translating ${fieldName} to ${targetLang}:`, error);
      alert(`Failed to translate ${fieldName} to ${targetLang}.`);
    } finally {
      setLoading(false);
    }
  };

  // Handle clicking the translate button for a specific field in EDIT modal
  const handleTranslateEditField = async (fieldName: 'name' | 'description', targetLang: 'en' | 'de' | 'hr') => {
    const baseSlovenianValue = editFormData[fieldName];
    if (!baseSlovenianValue) {
      alert(`Please enter the Slovenian ${fieldName} first.`);
      return;
    }

    let translateFunction: (text: string) => Promise<string>;
    switch (targetLang) {
      case 'en': translateFunction = translateToEnglish; break;
      case 'de': translateFunction = translateToGerman; break;
      case 'hr': translateFunction = translateToCroatian; break;
      default: return; // Should not happen
    }

    try {
      setLoading(true); // Indicate translation is in progress
      const translatedText = await translateFunction(baseSlovenianValue);
      const targetFieldName = `${fieldName}_${targetLang}` as keyof Product;
      console.log(`[Translate Edit] Target Field: ${targetFieldName}, Translated Text: ${translatedText}`);
      setEditFormData(prev => {
        const newState = { ...prev, [targetFieldName]: translatedText };
        console.log('[Translate Edit] State updated (next render):', newState);
        return newState;
      });
    } catch (error) {
      console.error(`Error translating ${fieldName} to ${targetLang}:`, error);
      alert(`Failed to translate ${fieldName} to ${targetLang}.`);
    } finally {
      setLoading(false);
    }
  };

  // --- Add New Product Logic ---
  const handleNewProductChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const { checked } = e.target as HTMLInputElement;
      setNewProductData(prev => ({ ...prev, [name]: checked }));
    } else if (type === 'number') {
      let numericValue: number | null;
      if (value === '') {
        // Allow null only for 'price'
        numericValue = (name === 'price') ? null : 0; // Default stock_quantity to 0 if empty, or handle differently
      } else {
        numericValue = parseFloat(value);
      }
      setNewProductData(prev => ({ ...prev, [name]: numericValue }));
    } else {
      // Handle text, textarea, etc.
      setNewProductData(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleNewProductPackageOptionChange = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    const updatedValue = type === 'checkbox' ? checked : type === 'number' ? (value === '' ? null : parseFloat(value)) : value; // Handle empty string for number -> null

    setNewProductData(prev => {
      if (!prev || !prev.package_options) return prev; 

      const updatedOptions = prev.package_options.map((option, i) => {
        if (i === index) {
          return { ...option, [name]: updatedValue };
        }
        return option;
      });
      return { ...prev, package_options: updatedOptions };
    });
  };

  const addNewProductPackageOption = () => {
    setNewProductData(prev => {
      const newIndex = prev.package_options ? prev.package_options.length : 0;
      // Use a temporary, unique ID for rendering keys before saving
      const tempUniqId = `new-${Date.now()}-${newIndex}`;
      return {
        ...prev,
        package_options: [
          ...(prev.package_options || []),
          {
            uniq_id: tempUniqId, // Temporary ID for key prop
            price: 0,
            stock: null, // Default to null (infinite)
            isActive: true,
            description: '',
            weight: ''
          }
        ]
      };
    });
  };

  const removeNewProductPackageOption = (indexToRemove: number) => {
    setNewProductData(prev => {
      if (!prev || !prev.package_options) return prev; 
      // Filter out the package option at the specified index
      const newPackages = prev.package_options.filter((_, index) => index !== indexToRemove);
      return { ...prev, package_options: newPackages };
    });
  };

  const handleAddNewProduct = async () => {
    // Ensure required fields are filled (especially Slovenian name)
    if (!newProductData.name) {
      alert('Slovenian product name is required.');
      return;
    }

    setLoading(true);
    try {
      // --- Manual ID Calculation (Robust Method) ---
      // 1. Fetch ALL IDs
      const { data: allIdsData, error: fetchIdsError } = await supabase
        .from('products')
        .select('id'); // Select all IDs

      if (fetchIdsError) throw fetchIdsError;

      // 2. Convert to numbers and find max
      let maxId = 0; // Default to 0 if table is empty
      if (allIdsData && allIdsData.length > 0) {
        const numericIds = allIdsData
          .map(item => parseInt(String(item.id), 10)) // Convert each id to number
          .filter(id => !isNaN(id)); // Filter out any potential NaN values

        if (numericIds.length > 0) {
          maxId = Math.max(...numericIds); // Find the highest number
        }
      }

      const nextId = maxId + 1;
      console.log(`Found ${allIdsData?.length ?? 0} IDs. Max numeric ID: ${maxId}, Next ID will be: ${nextId}`);
      // --- End Manual ID Calculation ---

      // 1. Prepare base product data for insertion - Build a clean payload
      const insertPayload: { [key: string]: any } = {};
      const allowedKeys: Array<keyof Omit<Product, 'id' | 'package_options' | 'created_at' | 'updated_at'>> = [
        'name', 'name_en', 'name_de', 'name_hr', 
        'description', 'description_en', 'description_de', 'description_hr', 
        'price', 'image_url', 'stock_quantity', 'category', 'isActive'
      ];

      allowedKeys.forEach(key => {
          if (Object.prototype.hasOwnProperty.call(newProductData, key) && newProductData[key] !== undefined) {
              insertPayload[key] = newProductData[key];
          }
      });
       
      // Add the manually calculated ID
      insertPayload.id = nextId; 

      // Ensure stock_quantity is set (defaulting to 0 if missing/null)
      if (insertPayload.stock_quantity === undefined || insertPayload.stock_quantity === null) {
        insertPayload.stock_quantity = 0; 
      }
       
      // 2. Insert base product data and retrieve the new ID
      console.log('--- Inserting Product Payload ---', insertPayload);
      const { error: insertError } = await supabase
        .from('products')
        .insert([insertPayload]) // Use the clean, explicitly built payload
        ; 
 
      if (insertError) throw insertError;

      // 3. Prepare and update package_options if they exist
      // Use optional chaining and check length
      if (newProductData.package_options && newProductData.package_options.length > 0) { 
        const finalPackageOptions = newProductData.package_options.map((option, index) => ({
          ...option,
          uniq_id: `${nextId}-${index}` // Assign final uniq_id
        }));

        // 4. Update the product row with the final package_options
        const { error: updateError } = await supabase
          .from('products')
          .update({ package_options: finalPackageOptions })
          .eq('id', nextId);

        if (updateError) throw updateError;
      }

      // 5. Success: Refresh list and close modal
      fetchProducts(); // Refresh the products list
      setShowAddProductModal(false); // Close the modal
      setNewProductData({ isActive: true }); // Reset form

    } catch (err: any) {
      console.error('Error adding new product:', err);
      alert(`Failed to add new product: ${err.message || 'Please try again.'}`);
    } finally {
      setLoading(false);
    }
  };

  // --- Edit Product Logic ---
  const handleEditFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const { checked } = e.target as HTMLInputElement;
      setEditFormData(prev => ({ ...prev, [name]: checked }));
    } else if (type === 'number') {
      let numericValue: number | null;
      if (value === '') {
        // Allow null only for 'price'
        numericValue = (name === 'price') ? null : 0; // Default stock_quantity to 0 if empty
      } else {
        numericValue = parseFloat(value);
      }
      setEditFormData(prev => ({ ...prev, [name]: numericValue }));
    } else {
      // Handle text, textarea, etc.
      setEditFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleEditPackageOptionChange = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    const updatedValue = type === 'checkbox' ? checked : type === 'number' ? (value === '' ? null : parseFloat(value)) : value;

    setEditFormData(prev => {
      if (!prev || !prev.package_options) return prev; 

      const updatedOptions = prev.package_options.map((option, i) => {
        if (i === index) {
          return { ...option, [name]: updatedValue };
        }
        return option;
      });
      return { ...prev, package_options: updatedOptions };
    });
  };

  const addEditPackageOption = () => {
    setEditFormData(prev => {
      if (!prev) return prev; // Need existing product data
      const newIndex = prev.package_options ? prev.package_options.length : 0;
      const tempUniqId = `new-edit-${Date.now()}-${newIndex}`; 

      return {
        ...prev,
        package_options: [
          ...(prev.package_options || []),
          {
            uniq_id: tempUniqId, // Temp ID for rendering key
            price: 0,
            stock: null,
            isActive: true,
            description: '',
            weight: ''
          }
        ]
      };
    });
  };

  const removeEditPackageOption = (indexToRemove: number) => {
    setEditFormData(prev => {
      if (!prev || !prev.package_options) return prev;
      const newPackages = prev.package_options.filter((_, index) => index !== indexToRemove);
      return { ...prev, package_options: newPackages };
    });
  };

  const handleUpdateProduct = async () => {
    if (!editFormData || !editFormData.id) {
      alert('No product selected for update or missing ID.');
      return;
    }

    const productId = editFormData.id;

    setLoading(true);
    try {
      // Prepare package options: ensure correct uniq_id format
      const finalPackageOptions = (editFormData.package_options || []).map((option, index) => {
        // If the option has a temporary ID, assign the final ID format
        const isNewOption = typeof option.uniq_id === 'string' && option.uniq_id.startsWith('new-edit-');
        return {
          ...option,
          uniq_id: isNewOption ? `${productId}-${index}` : option.uniq_id,
        };
      });

      // Prepare data for update: Selectively build the update payload
      const updateData: { [key: string]: any } = {}; // Use a less strict type initially

      // Include fields only if they have a value in editFormData, handling null for specific fields
      if (editFormData.name !== undefined) updateData.name = editFormData.name;
      if (editFormData.name_en !== undefined) updateData.name_en = editFormData.name_en;
      if (editFormData.name_de !== undefined) updateData.name_de = editFormData.name_de;
      if (editFormData.name_hr !== undefined) updateData.name_hr = editFormData.name_hr;
      if (editFormData.description !== undefined) updateData.description = editFormData.description;
      if (editFormData.description_en !== undefined) updateData.description_en = editFormData.description_en;
      if (editFormData.description_de !== undefined) updateData.description_de = editFormData.description_de;
      if (editFormData.description_hr !== undefined) updateData.description_hr = editFormData.description_hr;
      if (editFormData.image_url !== undefined) updateData.image_url = editFormData.image_url;
      if (editFormData.isActive !== undefined) updateData.isActive = editFormData.isActive;
      // Ensure stock_quantity is handled as a number or null
      if (editFormData.stock_quantity !== undefined && editFormData.stock_quantity !== null && editFormData.stock_quantity !== '') {
        updateData.stock_quantity = Number(editFormData.stock_quantity);
      } else {
        updateData.stock_quantity = null; // Set to null if empty or explicitly null
      }
      if (editFormData.category !== undefined) updateData.category = editFormData.category;

      // Handle 'price' specifically - can be null
      if (editFormData.price !== undefined) updateData.price = editFormData.price; 
      
      // Always include processed package_options
      updateData.package_options = finalPackageOptions;

      // Update the product in Supabase
      const { error: updateError } = await supabase
        .from('products')
        .update(updateData as Partial<Product>) // Cast back for Supabase client
        .eq('id', productId);

      if (updateError) throw updateError;

      fetchProducts();
      setEditingProduct(null); // Close the edit modal
      setEditFormData({});    // Clear the form data

    } catch (err: any) {
      console.error('Error updating product:', err);
      alert(`Failed to update product: ${err.message || 'Please try again.'}`);
    } finally {
      setLoading(false);
    }
  };

  // --- Delete Product Logic --- 
  const handleDeleteProduct = async (productId: number, productName: string) => {
    if (window.confirm(t('admin.productManagement.confirmDelete', `Are you sure you want to delete "${productName}"? This cannot be undone.`))) {
      setLoading(true);
      try {
        const { error } = await supabase
          .from('products')
          .delete()
          .eq('id', productId);

        if (error) throw error;

        // Remove the product from the local state
        setProducts(prev => prev.filter(p => p.id !== productId));
        alert(t('admin.productManagement.deleteSuccess', `Product "${productName}" deleted successfully.`));

      } catch (err: any) {
        console.error('Error deleting product:', err);
        alert(t('admin.productManagement.deleteError', `Failed to delete product: ${err.message || 'Please try again.'}`));
      } finally {
        setLoading(false);
      }
    }
  };

  // --- Main Render --- 
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-brown-800">{t('admin.productManagement.title', 'Product Management')}</h1>

      <button 
        onClick={() => setShowAddProductModal(true)}
        className="mb-6 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition duration-150"
      >
        {t('admin.productManagement.addNewProduct', 'Add New Product')}
      </button>

      {loading && <p className="text-center text-gray-600">{t('admin.loading', 'Loading products...')}</p>}
      {error && <p className="text-center text-red-600">{t('admin.error', 'Error loading products:')} {error}</p>}

      {!loading && !error && (
        <>
          {/* Add New Product Modal */}
          {showAddProductModal && (
            <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center p-4 z-50">
              <div className="bg-white rounded-lg shadow-2xl p-8 w-full max-w-3xl max-h-[90vh] overflow-y-auto">
                <h2 className="text-2xl font-bold mb-6 text-brown-800 border-b border-gray-200 pb-3">{t('admin.productManagement.addNewProduct', 'Add New Product')}</h2>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                  {/* Product Name (Required) */}
                  <div>
                    <label htmlFor="new_name" className="block text-sm font-medium text-gray-700 mb-1">
                      {t('admin.productManagement.name', 'Product Name')} <span className="text-red-500">*</span>
                    </label>
                    <input 
                      type="text"
                      id="new_name"
                      name="name"
                      value={newProductData.name || ''}
                      onChange={handleNewProductChange}
                      required
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                    />
                  </div>

                  {/* Placeholder for layout */}
                  <div></div>

{/* Slovenian Description */}
<div className="md:col-span-2">
<label htmlFor="new_description" className="block text-sm font-medium text-gray-700 mb-1">
{t('admin.productManagement.description', 'Description (Slovenian)')}
</label>
<textarea
id="new_description"
name="description"
rows={3}
value={newProductData.description || ''}
onChange={handleNewProductChange}
className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
></textarea>
</div>

{/* Description Translations */}
{['en', 'de', 'hr'].map(lang => (
<div key={`new-desc-${lang}`}>
<label htmlFor={`new_description_${lang}`} className="block text-sm font-medium text-gray-700 mb-1">
{t(`admin.productManagement.description${lang.toUpperCase()}`, `Description (${lang.toUpperCase()})`)}
</label>
<div className="flex items-center space-x-2">
<textarea
id={`new_description_${lang}`}
name={`description_${lang}`}
rows={2}
value={newProductData[`description_${lang}` as keyof Product] || ''}
onChange={handleNewProductChange}
className="flex-grow px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
></textarea>
<button
type="button"
onClick={() => handleTranslateNewField('description', lang as 'en' | 'de' | 'hr')}
disabled={!newProductData.description || loading}
className="text-xs bg-blue-500 hover:bg-blue-700 text-white py-1 px-2 rounded disabled:opacity-50"
>
{t('admin.productManagement.translate', 'Translate')}
</button>
</div>
</div>
))}
                    </label>
                    <textarea
                      id="new_description"
                      name="description"
                      rows={3}
                      value={newProductData.description || ''}
                      onChange={handleNewProductChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                    ></textarea>
                  </div>

                  {/* Description Translations */}
                  {['en', 'de', 'hr'].map(lang => (
                    <div key={`new-desc-${lang}`}>
                      <label htmlFor={`new_description_${lang}`} className="block text-sm font-medium text-gray-700 mb-1">
                        {t(`admin.productManagement.description${lang.toUpperCase()}`, `Description (${lang.toUpperCase()})`)}
                      </label>
                      <div className="flex items-center space-x-2">
                        <textarea
                          id={`new_description_${lang}`}
                          name={`description_${lang}`}
                          rows={2}
                          value={newProductData[`description_${lang}` as keyof Product] || ''}
                          onChange={handleNewProductChange}
                          className="flex-grow px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                        ></textarea>
                        <button
                          type="button"
                          onClick={() => handleTranslateNewField('description', lang as 'en' | 'de' | 'hr')}
                          disabled={!newProductData.description || loading}
                          className="text-xs bg-blue-500 hover:bg-blue-700 text-white py-1 px-2 rounded disabled:opacity-50"
                        >
                          {t('admin.productManagement.translate', 'Translate')}
                        </button>
                      </div>
                    </div>
                  ))}

                  {/* Category */}
                  <div>
                    <label htmlFor="new_category" className="block text-sm font-medium text-gray-700 mb-1">
                      {t('admin.productManagement.category', 'Category')}
                    </label>
                    <input
                      type="text"
                      id="new_category"
                      name="category"
                      value={newProductData.category || ''}
                      onChange={handleNewProductChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                    />
                  </div>

                  {/* Image URL */}
                  <div>
                    <label htmlFor="new_image_url" className="block text-sm font-medium text-gray-700 mb-1">
                      {t('admin.productManagement.imageUrl', 'Image URL')}
                    </label>
                    <input
                      type="text"
                      id="new_image_url"
                      name="image_url"
                      value={newProductData.image_url || ''}
                      onChange={handleNewProductChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                    />
                  </div>
                  
                  {/* Is Active Toggle */}
                  <div className="md:col-span-2 flex items-center">
                    <input 
                      type="checkbox"
                      id="new_isActive"
                      name="isActive"
                      checked={!!newProductData.isActive} 
                      onChange={handleNewProductChange}
                      className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                    />
                    <label htmlFor="new_isActive" className="ml-2 block text-sm text-gray-900">
                      {t('admin.productManagement.active', 'Active')}
                    </label>
                  </div>
                </div>

                {/* Package Options Section */}
                <h3 className="text-xl font-semibold mb-4 text-brown-700 border-t pt-4 mt-6">{t('admin.productManagement.packageOptions', 'Package Options')}</h3>
                
                <div className="space-y-4 mb-4">
                  {(newProductData.package_options || []).map((option, index) => (
                    <div key={option.uniq_id || index} className="p-4 border rounded-md bg-gray-50 grid grid-cols-1 sm:grid-cols-3 gap-4 items-start relative">
                      {/* Remove Button for this option */}
                       <button 
                          type="button"
                          onClick={() => removeNewProductPackageOption(index)} 
                          className="absolute top-1 right-1 text-red-500 hover:text-red-700 text-xs font-semibold"
                          aria-label="Remove package option"
                        >
                          &times; {/* Multiplication sign for 'X' */}
                        </button>

                      {/* Price Input */}
                      <div>
                        <label htmlFor={`pkg_price_${index}`} className="block text-xs font-medium text-gray-600 mb-1">
                          {t('admin.productManagement.packagePrice', 'Price (€)')}
                        </label>
                        <input
                          type="number"
                          id={`pkg_price_${index}`}
                          name="price"
                          value={option.price}
                          onChange={(e) => handleNewProductPackageOptionChange(index, e)}
                          step="0.01"
                          className="w-full px-2 py-1 border border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                        />
                      </div>
                      
                      {/* Weight Input */}
                      <div>
                        <label htmlFor={`pkg_weight_${index}`} className="block text-xs font-medium text-gray-600 mb-1">
                          {t('admin.productManagement.packageWeight', 'Weight (e.g., 500g)')}
                        </label>
                        <input
                          type="text"
                          id={`pkg_weight_${index}`}
                          name="weight"
                          value={option.weight || ''}
                          onChange={(e) => handleNewProductPackageOptionChange(index, e)}
                          className="w-full px-2 py-1 border border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                        />
                      </div>
                      
                      {/* Stock Input */}
                      <div>
                        <label htmlFor={`pkg_stock_${index}`} className="block text-xs font-medium text-gray-600 mb-1">
                          {t('admin.productManagement.packageStock', 'Stock (null for infinite)')}
                        </label>
                        <input
                          type="number"
                          id={`pkg_stock_${index}`}
                          name="stock"
                          value={option.stock ?? ''} // Show empty string if null
                          onChange={(e) => handleNewProductPackageOptionChange(index, e)}
                          className="w-full px-2 py-1 border border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                        />
                      </div>

                      {/* Description Input */}
                      <div className="sm:col-span-2">
                        <label htmlFor={`pkg_description_${index}`} className="block text-xs font-medium text-gray-600 mb-1">
                          {t('admin.productManagement.packageDescription', 'Description')}
                        </label>
                        <input
                          type="text"
                          id={`pkg_description_${index}`}
                          name="description"
                          value={option.description || ''}
                          onChange={(e) => handleNewProductPackageOptionChange(index, e)}
                          className="w-full px-2 py-1 border border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                        />
                      </div>
                      
                      {/* Active Toggle */}
                      <div className="flex items-center pt-4">
                        <input
                          type="checkbox"
                          id={`pkg_isActive_${index}`}
                          name="isActive"
                          checked={!!option.isActive} 
                          onChange={(e) => handleNewProductPackageOptionChange(index, e)}
                          className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                        />
                        <label htmlFor={`pkg_isActive_${index}`} className="ml-2 block text-sm text-gray-900">
                          {t('admin.productManagement.active', 'Active')}
                        </label>
                      </div>
                    </div>
                  ))}
                </div>
                
                {/* Add Package Option Button */}
                <button
                  type="button"
                  onClick={addNewProductPackageOption}
                  className="mb-6 px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 transition duration-150 flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" /></svg>
                  {t('admin.productManagement.addPackageOption', 'Add Package Option')}
                </button>

                {/* Modal Footer Buttons */}
                <div className="flex justify-end space-x-4 mt-8 border-t pt-4">
                  <button
                    type="button"
                    onClick={() => setShowAddProductModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400 transition duration-150"
                  >
                    {t('admin.cancel', 'Cancel')}
                  </button>
                  <button
                    type="button"
                    onClick={handleAddNewProduct}
                    className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50"
                    disabled={loading}
                  >
                    {loading ? t('admin.saving', 'Saving...') : t('admin.productManagement.addProduct', 'Add Product')}
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Products Table */}
          <div className="overflow-x-auto shadow-md rounded-lg">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-100">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('admin.productManagement.image', 'Image')}</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('admin.productManagement.name', 'Name')}</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('admin.productManagement.description', 'Description')}</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('admin.productManagement.stock', 'Stock')}</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('admin.productManagement.active', 'Active')}</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('admin.productManagement.actions', 'Actions')}</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {products.map((product) => (
                  <tr key={product.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      {product.image_url ? (
                        <img 
                          src={product.image_url} 
                          alt={product.name} 
                          style={{ width: '50px', height: '50px', objectFit: 'cover', borderRadius: '4px' }} 
                        />
                      ) : (
                        <div style={{ width: '50px', height: '50px', backgroundColor: '#f0f0f0', borderRadius: '4px', display: 'flex', alignItems: 'center', justifyContent: 'center', color: '#aaa' }}>No img</div> // Placeholder
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">{product.name}</div>
                      {product.name_en && <div className="text-xs text-gray-500">EN: {product.name_en}</div>}
                      {/* Add DE/HR names if needed */} 
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 truncate max-w-xs">
                      {product.description}
                      {product.description_en && <div className="text-xs text-gray-500 mt-1">EN: {product.description_en}</div>}
                      {/* Add DE/HR descriptions if needed */} 
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{product.stock_quantity ?? 'N/A'}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${product.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                        {product.isActive ? t('admin.active', 'Active') : t('admin.inactive', 'Inactive')}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
                      <button 
                        onClick={() => setEditingProduct(product)}
                        className="text-indigo-600 hover:text-indigo-900"
                      >
                        {t('admin.edit', 'Edit')}
                      </button>
                      <button
                        onClick={() => handleDeleteProduct(product.id, product.name)}
                        className="text-red-600 hover:text-red-900 ml-2"
                        disabled={loading}
                      >
                        {t('admin.delete', 'Delete')}
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </>
      )}
      {/* Edit Product Modal */}
      {editingProduct && editFormData && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-2xl p-8 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <h2 className="text-2xl font-bold mb-6 text-brown-800 border-b border-gray-200 pb-3">{t('admin.productManagement.editProduct', 'Edit Product')} (ID: {editingProduct.id})</h2>
            
            {/* Form Grid - Similar to Add Modal, but uses editFormData and handleEditFormChange */} 
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
               {/* Slovenian Name */}
               <div>
                 <label htmlFor="edit_name" className="block text-sm font-medium text-gray-700 mb-1">{t('admin.productManagement.name', 'Product Name (Slovenian)')}</label>
                 <input 
                   type="text"
                   id="edit_name"
                   name="name"
                   value={editFormData.name || ''}
                   onChange={handleEditFormChange}
                   required
                   className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                 />
               </div>
               <div></div> {/* Placeholder */} 

               {/* Name Translations */}
               {['en', 'de', 'hr'].map(lang => (
                 <div key={`edit-name-${lang}`}>
                   <label htmlFor={`edit_name_${lang}`} className="block text-sm font-medium text-gray-700 mb-1">{t('admin.productManagement.name', 'Product Name')} ({lang.toUpperCase()})</label>
                   <div className="flex space-x-2">
                     <input
                       type="text"
                       id={`edit_name_${lang}`}
                       name={`name_${lang}`}
                       value={editFormData[`name_${lang}` as keyof Product] || ''}
                       onChange={handleEditFormChange}
                       className="flex-grow px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                     />
                     <button 
                       type="button"
                       onClick={() => handleTranslateEditField('name', lang as 'en' | 'de' | 'hr')}
                       className="px-3 py-2 bg-blue-100 text-blue-700 text-xs rounded hover:bg-blue-200 transition duration-150 mt-1"
                       disabled={loading || !editFormData.name}
                       title={`${t('admin.productManagement.translateFrom', 'Translate from')} SL`}
                     >
                       {t('admin.translate', 'Translate')}
                     </button>
                   </div>
                 </div>
               ))}

               {/* Slovenian Description */} 
               <div className="md:col-span-2">
                 <label htmlFor="edit_description" className="block text-sm font-medium text-gray-700 mb-1">{t('admin.productManagement.description', 'Description (Slovenian)')}</label>
                 <textarea
                   id="edit_description"
                   name="description"
                   rows={3}
                   value={editFormData.description || ''}
                   onChange={handleEditFormChange}
                   className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                 ></textarea>
               </div>

               {/* Description Translations */} 
               {['en', 'de', 'hr'].map(lang => (
                 <div key={`edit-desc-${lang}`} className="md:col-span-2">
                   <label htmlFor={`edit_description_${lang}`} className="block text-sm font-medium text-gray-700 mb-1">{t('admin.productManagement.description', 'Description')} ({lang.toUpperCase()})</label>
                   <div className="flex space-x-2 items-start">
                     <textarea
                       id={`edit_description_${lang}`}
                       name={`description_${lang}`}
                       rows={2}
                       value={editFormData[`description_${lang}` as keyof Product] || ''}
                       onChange={handleEditFormChange}
                       className="flex-grow px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                     ></textarea>
                     <button 
                       type="button"
                       onClick={() => handleTranslateEditField('description', lang as 'en' | 'de' | 'hr')}
                       className="px-3 py-2 bg-blue-100 text-blue-700 text-xs rounded hover:bg-blue-200 transition duration-150 mt-1"
                       disabled={loading || !editFormData.description}
                       title={`${t('admin.productManagement.translateFrom', 'Translate from')} SL`}
                     >
                       {t('admin.translate', 'Translate')}
                     </button>
                   </div>
                 </div>
               ))}

               {/* Category */}
               <div>
                 <label htmlFor="edit_category" className="block text-sm font-medium text-gray-700 mb-1">{t('admin.productManagement.category', 'Category')}</label>
                 <input 
                   type="text"
                   id="edit_category"
                   name="category"
                   value={editFormData.category || ''}
                   onChange={handleEditFormChange}
                   className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                 />
               </div>

               {/* Image URL */}
               <div className="md:col-span-1">
                 <label htmlFor="edit_image_url" className="block text-sm font-medium text-gray-700 mb-1">{t('admin.productManagement.imageUrl', 'Image URL')}</label>
                 <input 
                   type="text"
                   id="edit_image_url"
                   name="image_url"
                   value={editFormData.image_url || ''}
                   onChange={handleEditFormChange}
                   className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                   placeholder="https://example.com/image.jpg"
                 />
               </div>

               {/* Is Active Toggle */}
               <div className="flex items-center md:col-span-1 pt-5">
                 <input
                   type="checkbox"
                   id="edit_isActive"
                   name="isActive"
                   checked={!!editFormData.isActive} 
                   onChange={handleEditFormChange}
                   className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                 />
                 <label htmlFor="edit_isActive" className="ml-2 block text-sm text-gray-900">
                   {t('admin.productManagement.active', 'Active')}
                 </label>
               </div>
             </div>

             {/* Package Options Section */}
             <h3 className="text-xl font-semibold mb-4 text-brown-700 border-t pt-4 mt-6">{t('admin.productManagement.packageOptions', 'Package Options')}</h3>
             <div className="space-y-4 mb-4">
               {(editFormData.package_options || []).map((option, index) => (
                 <div key={option.uniq_id || index} className="p-4 border rounded-md bg-gray-50 grid grid-cols-1 sm:grid-cols-3 gap-4 items-start relative">
                   <button 
                     type="button"
                     onClick={() => removeEditPackageOption(index)} 
                     className="absolute top-1 right-1 text-red-500 hover:text-red-700 text-xs font-semibold"
                     aria-label="Remove package option"
                   >
                     &times;
                   </button>

                   {/* Price Input */}
                   <div>
                     <label htmlFor={`edit_pkg_price_${index}`} className="block text-xs font-medium text-gray-600 mb-1">
                       {t('admin.productManagement.packagePrice', 'Price (€)')}
                     </label>
                     <input
                       type="number"
                       id={`edit_pkg_price_${index}`}
                       name="price"
                       value={option.price}
                       onChange={(e) => handleEditPackageOptionChange(index, e)}
                       step="0.01"
                       className="w-full px-2 py-1 border border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                     />
                   </div>
                   
                   {/* Weight Input */}
                   <div>
                     <label htmlFor={`edit_pkg_weight_${index}`} className="block text-xs font-medium text-gray-600 mb-1">
                       {t('admin.productManagement.packageWeight', 'Weight (e.g., 500g)')}
                     </label>
                     <input
                       type="text"
                       id={`edit_pkg_weight_${index}`}
                       name="weight"
                       value={option.weight || ''}
                       onChange={(e) => handleEditPackageOptionChange(index, e)}
                       className="w-full px-2 py-1 border border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                     />
                   </div>
                   
                   {/* Stock Input */}
                   <div>
                     <label htmlFor={`edit_pkg_stock_${index}`} className="block text-xs font-medium text-gray-600 mb-1">
                       {t('admin.productManagement.packageStock', 'Stock (null for infinite)')}
                     </label>
                     <input
                       type="number"
                       id={`edit_pkg_stock_${index}`}
                       name="stock"
                       value={option.stock ?? ''} // Show empty string if null
                       onChange={(e) => handleEditPackageOptionChange(index, e)}
                       className="w-full px-2 py-1 border border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                     />
                   </div>

                   {/* Description Input */}
                   <div className="sm:col-span-2">
                     <label htmlFor={`edit_pkg_description_${index}`} className="block text-xs font-medium text-gray-600 mb-1">
                       {t('admin.productManagement.packageDescription', 'Description')}
                     </label>
                     <input
                       type="text"
                       id={`edit_pkg_description_${index}`}
                       name="description"
                       value={option.description || ''}
                       onChange={(e) => handleEditPackageOptionChange(index, e)}
                       className="w-full px-2 py-1 border border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                     />
                   </div>
                   
                   {/* Active Toggle */}
                   <div className="flex items-center pt-4">
                     <input
                       type="checkbox"
                       id={`edit_pkg_isActive_${index}`}
                       name="isActive"
                       checked={!!option.isActive} 
                       onChange={(e) => handleEditPackageOptionChange(index, e)}
                       className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                     />
                     <label htmlFor={`edit_pkg_isActive_${index}`} className="ml-2 block text-sm text-gray-900">
                       {t('admin.productManagement.active', 'Active')}
                     </label>
                   </div>
                 </div>
               ))}
             </div>
             <button
               type="button"
               onClick={addEditPackageOption}
               className="mb-6 px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 transition duration-150 flex items-center"
             >
               <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" /></svg>
               {t('admin.productManagement.addPackageOption', 'Add Package Option')}
             </button>

             {/* Modal Footer Buttons */} 
             <div className="flex justify-end space-x-4 mt-8 border-t pt-4">
               <button
                 type="button"
                 onClick={() => setEditingProduct(null)} // Close modal by clearing editingProduct
                 className="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400"
               >
                 {t('admin.cancel', 'Cancel')}
               </button>
               <button
                 type="button"
                 onClick={handleUpdateProduct} 
                 className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 disabled:opacity-50"
                 disabled={loading}
               >
                 {loading ? t('admin.saving', 'Saving...') : t('admin.saveChanges', 'Save Changes')}
               </button>
             </div>
           </div>
         </div>
       )}
    </div>
  );
};

export default AdminProductsPage;
